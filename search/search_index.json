{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"initry","text":"<p>initry is a reporting system for automation tests. Currently it supports the Pytest framework.</p>"},{"location":"#how-does-initry-work","title":"How does Initry work?","text":"<p>A pytest plugin collects the execution statuses of test cases and sends them to the Initry backend. You can review test runs and tests that are in progress or have been completed.</p> <p>initry consists of:</p> <ul> <li>Frontend (Next.js)</li> <li>Backend (FastAPI)</li> <li>Pytest plugin</li> </ul> <p>Communication between the backend and frontend is organized via gRPC.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11.8</li> <li>MongoDB 7</li> <li>Docker</li> </ul>"},{"location":"#configuration","title":"Configuration","text":"<p>Before running initry, make sure to set up your environment:</p> <ol> <li> <p>Navigate to the <code>backend</code> folder and create your <code>.env</code> file by copying the <code>env.example</code> file:     <pre><code>cp env.example .env\n</code></pre></p> </li> <li> <p>Configure the <code>.env</code> file based on your settings. Open the <code>.env</code> file and set values for the environment variables. </p> </li> <li>Navigate to the <code>frontend</code> folder, create your <code>.env</code> file by copying the <code>env.example</code> file and do the necessary changes in envs based on your settings:     <pre><code>cp env.example .env\n</code></pre></li> </ol>"},{"location":"#running-initry","title":"Running Initry","text":"<p>To run Initry, follow these steps:</p> <ol> <li> <p>Navigate back to the root folder of Initry.</p> </li> <li> <p>Execute the <code>run_docker.sh</code> script:     <pre><code>./run_docker.sh\n</code></pre></p> </li> </ol> <p>This will start Initry with the specified environment settings. </p> <ol> <li>Open http://localhost:3000</li> </ol>"},{"location":"#install-pytest-initry","title":"Install pytest-initry","text":"<p>To collect test results you need to install the pytest-initry library.</p>"},{"location":"#optional","title":"Optional","text":"<p>Change API port: Configure <code>INITRY_API_EXTERNAL_PORT</code> in your <code>.env</code> file.</p> <p>Change Frontend port: Configure <code>INITRY_FRONTEND_EXTERNAL_PORT</code> in your <code>.env</code> file.</p>"},{"location":"contribute/development/","title":"Development","text":""},{"location":"contribute/development/#backend","title":"Backend","text":""},{"location":"contribute/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Poetry</li> <li>Python 3.11</li> <li>Pyenv (optional)</li> <li>MongoDB 7</li> </ul>"},{"location":"contribute/development/#steps","title":"Steps","text":"<p>Start Redis docker container.     <pre><code>docker run -d --name redis -p 6379:6379 redis\n</code></pre> Create <code>.env</code> file based on <code>env.example</code>, which can be found in the <code>backend</code> folder:     <pre><code>INITRY_API_EXTERNAL_PORT=8000\nINITRY_GRPC_EXTERNAL_PORT=50051\nINITRY_FRONTEND_EXTERNAL_PORT=3000\nMONGO_URI=mongodb://localhost:27017/ (1)\nDATABASE_NAME=database (2)\nBROKER_URL=redis://redis:6379/0\nCELERY_RESULT_BACKEND=redis://redis:6379/0\n</code></pre></p> <ol> <li>Configure your MongoDB host</li> <li>Configure your MongoDB database name</li> </ol> <p>Skip this step, if you already have Python 3.11 installed. In this tutorial we are using Pyenv for Python version management. Go to the <code>backend</code> folder and configure Pyenv.     <pre><code>pyenv local 3.11\n</code></pre>  In the <code>backend</code> folder configure and install the Poetry environment    <pre><code>poetry use 3.11\npoetry install\n</code></pre> Activate the Poetry environment:    <pre><code>poetry shell\n</code></pre> Run the backend:    <pre><code>python -m uvicorn main:app --reload\n</code></pre> Run the Celery worker:    <pre><code>celery -A tasks.tasks worker -l INFO\n</code></pre></p> <p>Check <code>http://localhost:8000/docs</code> for OpenAPI docs.  </p>"},{"location":"contribute/development/#additional","title":"Additional","text":""},{"location":"contribute/development/#grpc","title":"gRPC","text":"<p>.proto files can be found in the <code>proto</code> folder. To build the protofiles, execute:     <pre><code>cd backend/proto\n./run.sh\n</code></pre> Move generated files to the <code>backend/protobufs</code> folder.  </p> <p>Please note</p> <p>Ensure that you have copied the newly generated file for pytest-initry as well. Changes in protocols should be reflected on both the client and server sides.</p>"},{"location":"contribute/development/#openapi","title":"OpenAPI","text":"<p>After making any changes to the backend API, you must rebuild the frontend client.: <pre><code>cd backend/openapi-codegen\n./run.sh\n</code></pre> Move the generated <code>client</code> folder inside the <code>frontend</code> folder.</p>"},{"location":"contribute/development/#requirementstxt","title":"Requirements.txt","text":"<p>If you add new dependencies to Poetry, please generate a <code>requirements.txt</code> file for the Docker environment.:    <pre><code>poetry export --without-hashes --format=requirements.txt &gt; requirements.txt\n</code></pre></p>"},{"location":"contribute/development/#frontend","title":"Frontend","text":"<p>Install npm modules:    Run the following command to install the necessary npm modules:     <pre><code>npm install\n</code></pre>    This will install all dependencies required for the frontend.</p> <p>Copy the <code>env.example</code> file to create your <code>.env</code> file:     <pre><code>cp env.example .env\n</code></pre> You can then configure the <code>.env</code> file according to your specific settings. Open the <code>.env</code> file and set appropriate values for the environment variables. </p> <p>Start the frontend in development mode:     <pre><code>npm run dev\n</code></pre>    This will launch the development server and you can access the frontend application in your browser.</p>"}]}